#include <boost/test/unit_test.hpp>
#include "../Lab/DiagonalMatrix.h"
#include "../Lab/Matrix.h"

BOOST_AUTO_TEST_SUITE(DiagonalMatrixTests) // Начало набора тестов для диагональных матриц

// Тестирование конструктора и доступа к элементам
BOOST_AUTO_TEST_CASE(ConstructorAndAccess) {
    DiagonalMatrix<double> mat(3, 3); // Создаем диагональную матрицу 3x3

    // Устанавливаем значения на главной диагонали
    mat(0, 0) = 1.0; // Задаем элемент (0, 0)
    mat(1, 1) = 2.0; // Задаем элемент (1, 1)
    mat(2, 2) = 3.0; // Задаем элемент (2, 2)

    // Проверяем корректность доступа к диагональным элементам
    BOOST_CHECK_EQUAL(mat(0, 0), 1.0); // Ожидаем, что матрица в (0, 0) равна 1.0
    BOOST_CHECK_EQUAL(mat(1, 1), 2.0); // Ожидаем, что матрица в (1, 1) равна 2.0
    BOOST_CHECK_EQUAL(mat(2, 2), 3.0); // Ожидаем, что матрица в (2, 2) равна 3.0

    // Проверка значений вне главной диагонали
    BOOST_CHECK_EQUAL(mat(0, 1), 0.0); // Ожидаем, что матрица в (0, 1) равна 0.0
    BOOST_CHECK_EQUAL(mat(1, 0), 0.0); // Ожидаем, что матрица в (1, 0) равна 0.0
}

// Тестирование сложения диагональных матриц
BOOST_AUTO_TEST_CASE(Addition) {
    DiagonalMatrix<double> a(3, 3); // Создаем первую диагональную матрицу 3x3
    DiagonalMatrix<double> b(3, 3); // Создаем вторую диагональную матрицу 3x3

    // Заполнение матрицы a
    a(0, 0) = 1.0; // (0, 0)
    a(1, 1) = 2.0; // (1, 1)
    a(2, 2) = 3.0; // (2, 2)

    // Заполнение матрицы b
    b(0, 0) = 4.0; // (0, 0)
    b(1, 1) = 5.0; // (1, 1)
    b(2, 2) = 6.0; // (2, 2)

    DiagonalMatrix<double>* result = static_cast<DiagonalMatrix<double>*>(a + b); // Сложение двух диагональных матриц

    // Проверка результатов сложения
    BOOST_CHECK_EQUAL((*result)(0, 0), 5.0);// Ожидаем, что (0, 0) равно 1.0 + 4.0 = 5.0
    BOOST_CHECK_EQUAL((*result)(1, 1), 7.0); // Ожидаем, что (1, 1) равно 2.0 + 5.0 = 7.0
    BOOST_CHECK_EQUAL((*result)(2, 2), 9.0);// Ожидаем, что (2, 2) равно 3.0 + 6.0 = 9.0

    delete result; // Не забывайте освобождать память
}

// Тестирование вычитания диагональных матриц
BOOST_AUTO_TEST_CASE(Subtraction) {
    DiagonalMatrix<double> a(3, 3); // Создаем первую диагональную матрицу 3x3
    DiagonalMatrix<double> b(3, 3); // Создаем вторую диагональную матрицу 3x3

    // Заполнение матрицы a
    a(0, 0) = 5.0; // (0, 0)
    a(1, 1) = 6.0; // (1, 1)
    a(2, 2) = 7.0; // (2, 2)

    // Заполнение матрицы b
    b(0, 0) = 3.0; // (0, 0)
    b(1, 1) = 2.0; // (1, 1)
    b(2, 2) = 1.0; // (2, 2)

    DiagonalMatrix<double>* result = static_cast<DiagonalMatrix<double>*>(a - b); // Вычитание двух диагональных матриц

    // Проверка результатов вычитания
    BOOST_CHECK_EQUAL((*result)(0, 0), 2.0); // Ожидаем, что (0, 0) равно 5.0 - 3.0 = 2.0
    BOOST_CHECK_EQUAL((*result)(1, 1), 4.0); // Ожидаем, что (1, 1) равно 6.0 - 2.0 = 4.0
    BOOST_CHECK_EQUAL((*result)(2, 2), 6.0); // Ожидаем, что (2, 2) равно 7.0 - 1.0 = 6.0
}

// Тестирование умножения диагональных матриц
BOOST_AUTO_TEST_CASE(Multiplication) {
    DiagonalMatrix<double> a(3, 3); // Создаем первую диагональную матрицу 3x3
    DiagonalMatrix<double> b(3, 3); // Создаем вторую диагональную матрицу 3x3

    // Заполнение матрицы a
    a(0, 0) = 1.0; // (0, 0)
    a(1, 1) = 2.0; // (1, 1)
    a(2, 2) = 3.0; // (2, 2)

    // Заполнение матрицы b
    b(0, 0) = 4.0; // (0, 0)
    b(1, 1) = 5.0; // (1, 1)
    b(2, 2) = 6.0; // (2, 2)

    DiagonalMatrix<double>* result = static_cast<DiagonalMatrix<double>*>(a * b); // Умножение двух диагональных матриц

    // Проверка результатов умножения

    BOOST_CHECK_EQUAL((*result)(0, 0), 4.0); // Ожидаем, что (0, 0) равно 1.0 * 4.0 = 4.0
    BOOST_CHECK_EQUAL((*result)(1, 1), 10.0); // Ожидаем, что (1, 1) равно 2.0 * 5.0 = 10.0
    BOOST_CHECK_EQUAL((*result)(2, 2), 18.0); // Ожидаем, что (2, 2) равно 3.0 * 6.0 = 18.0
}

// Тестирование сложения несовместимых матриц
BOOST_AUTO_TEST_CASE(IncompatibleAddition) {
    DiagonalMatrix<double> a(2, 3); // Создаем первую диагональную матрицу 2x3
    DiagonalMatrix<double> b(3, 2); // Создаем вторую диагональную матрицу 3x2

    // Проверяем, что сложение этих матриц вызывает исключение
    BOOST_CHECK_THROW(a + b, std::runtime_error); // Ожидаем исключение при сложении несовместимых матриц
}

// Тестирование умножения несовместимых матриц
BOOST_AUTO_TEST_CASE(IncompatibleMultiplication) {
    DiagonalMatrix<double> a(3, 3); // Создаем первую диагональную матрицу 3x3
    DiagonalMatrix<double> b(2, 3); // Создаем вторую диагональную матрицу 2x3 (несовместимые размеры)

    // Проверяем, что умножение этих матриц вызывает исключение
    BOOST_CHECK_THROW(a * b, std::runtime_error); // Ожидаем исключение при умножении несовместимых матриц
}



BOOST_AUTO_TEST_SUITE_END() // Конец набора тестов для диагональных матриц
